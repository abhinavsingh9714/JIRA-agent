import json
from .project_context import ProjectSnapshotService
from .style_analyser import ProjectStyleAnalyzer
from ..services.field_meta import FieldMetadataService
from ..services.jira_client import JiraClient
from .llm import PlanningLLMService
from .models import Plan
from pathlib import Path

class AIPlanner:
    def __init__(self, project_key, example_project_key=None):
        self.jira = JiraClient()
        self.project_key = project_key
        if example_project_key is not None:
            self.need_example = True
            self.example_project_key = example_project_key
        else:
            self.need_example = False
            self.example_project_key = None
        # 1. Metadata
        self.field_service = FieldMetadataService(self.jira)
        # self.context_service = FeatureContextService(self.jira)
        self.llm_service   = PlanningLLMService()
        # self.tktOrchestrator = TicketOrchestrator(self.jira)

    def plan(self, task_description):
        """
        Generate a plan based on the provided task description using the AI model.
        
        Args:
            task_description (str): A description of the task to be planned.
        
        Returns:
            str: A detailed plan generated by the AI model.
        """
        account_id = self.field_service.get_user_id()

        if self.need_example:
            self.snapshot_svc = ProjectSnapshotService(self.jira)
            issues = self.snapshot_svc.fetch_issue_metadata(project_key=self.example_project_key)

            self.style_analyzer = ProjectStyleAnalyzer()
            style_guide = self.style_analyzer.summarize(issues)

            fields = self.field_service.get_allowed_field_map(self.example_project_key, 'epic')
            cleaned_fields = "\n".join(
                f"* {n} (required={m['required']})" for n, m in fields.items()
            )
            # print(cleaned_fields)
        llm_plan = self.llm_service.create_plan(
            project_key=self.project_key,
            user_prompt=task_description,
            style_guide=style_guide if self.need_example else None,
            fields_guide=cleaned_fields if self.need_example else None
        )
        # print(llm_plan)
        # llm_plan_json = Path("/Users/abhinavsingh/projects/JIRA-agent/plan.json").read_text()
        # llm_plan = json.loads(llm_plan_json)
        # plan = Plan.model_validate(llm_plan)
        # plan = self.tktOrchestrator.create_plan(plan, account_id, self.project_key)
        return llm_plan

if __name__ == "__main__":
    planner = AIPlanner(project_key="JIRADEMO", example_project_key="JIRADEMO")
    task_description = "I want to make a resume builder app that generates resumes from user input. the system should allow users to input their personal information, work experience, education, and skills. The app should then generate a professional-looking resume in PDF format that users can download and print. from the input experience and projects in raw works the system should generate highly optimised and crisp bullet that would pass through ATS systems. The system should also allow users to choose from different resume templates and styles. The app should be user-friendly and easy to navigate, with clear instructions on how to use it. The system should also have a feature that allows users to save their resumes for future editing and downloading."
    plan = planner.plan(task_description)
     # This will print the generated plan based on the task description.
    print(plan)
    